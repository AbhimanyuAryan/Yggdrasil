#!/usr/bin/env julia

using SHA, BinaryProvider, BinaryBuilder

function list_targz_files(d)
    return [joinpath(d, f) for f in readdir(d) if length(f) > 7 && f[end-6:end] == ".tar.gz"]
end


# Collect list of .tar.gz files
targz_files = list_targz_files(@__DIR__)
if isempty(targz_files)
    append!(targz_files, list_targz_files(joinpath(@__DIR__, "Rootfs", "products")))
    append!(targz_files, list_targz_files(joinpath(@__DIR__, "BaseCompilerShard", "products")))
    append!(targz_files, list_targz_files(joinpath(@__DIR__, "GCC", "products")))
    append!(targz_files, list_targz_files(joinpath(@__DIR__, "LLVM", "products")))
end

function teeln(io::IO, args...)
    println(io, args...)
    println(args...)
end

rht_path = joinpath(dirname(pathof(BinaryBuilder)), "RootfsHashTable.jl")
rm(rht_path*".new"; force=true)
open(rht_path*".new", "w") do fout
    teeln(fout, "## This file auto-generated by Yggdrasil/build_hashes.jl")
    teeln(fout, "shard_hash_table = Dict{CompilerShard,String}(")
    for fname in targz_files
        name, version, platform = extract_name_version_platform_key(fname)

        # Split out target platform if we've got one.
        target = ""
        if occursin("-", name)
            target = "; target=platform_key_abi($(repr(name[first(findfirst("-", name))+1:end])))"
            name = split(name, "-")[1]
        end

        tar_hash = open(fname, "r") do f
            bytes2hex(sha256(f))
        end
        teeln(fout, "    CompilerShard($(repr(name)), $(repr(version)), $(repr(platform)), :targz$(target))")
        teeln(fout, "      => $(repr(tar_hash)),")
        squash_hash = open(fname[1:end-7]*".squashfs", "r") do f
            bytes2hex(sha256(f))
        end
        teeln(fout, "    CompilerShard($(repr(name)), $(repr(version)), $(repr(platform)), :squashfs$(target))")
        teeln(fout, "      => $(repr(squash_hash)),")
    end
    teeln(fout, ")")
end

mv(rht_path*".new", rht_path; force=true)
